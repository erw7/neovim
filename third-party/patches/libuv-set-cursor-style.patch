diff --git a/src/win/tty.c b/src/win/tty.c
index a6f58395..e8df2c50 100644
--- a/src/win/tty.c
+++ b/src/win/tty.c
@@ -62,6 +62,9 @@
 #define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004
 #endif
 
+#define BLOCK_CURSOR        100
+#define UNDERLINE_CURSOR     25
+
 static void uv_tty_capture_initial_style(CONSOLE_SCREEN_BUFFER_INFO* info);
 static void uv_tty_update_virtual_window(CONSOLE_SCREEN_BUFFER_INFO* info);
 static int uv__cancel_read_console(uv_tty_t* handle);
@@ -1614,6 +1617,30 @@ static int uv_tty_set_cursor_visibility(uv_tty_t* handle,
   return 0;
 }
 
+static int uv_tty_set_cursor_shape(uv_tty_t* handle,
+                                        DWORD* error) {
+  CONSOLE_CURSOR_INFO cursor_info;
+
+  if (!GetConsoleCursorInfo(handle->handle, &cursor_info)) {
+    *error = GetLastError();
+    return -1;
+  }
+
+  if (handle->tty.wr.ansi_csi_argv[0] <= 2) {
+    cursor_info.dwSize = BLOCK_CURSOR;
+  } else {
+    cursor_info.dwSize = UNDERLINE_CURSOR;
+  }
+
+  if (!SetConsoleCursorInfo(handle->handle, &cursor_info)) {
+    *error = GetLastError();
+    return -1;
+  }
+
+  return 0;
+}
+
+
 static int uv_tty_write_bufs(uv_tty_t* handle,
                              const uv_buf_t bufs[],
                              unsigned int nbufs,
@@ -1704,6 +1731,7 @@ static int uv_tty_write_bufs(uv_tty_t* handle,
 
     for (j = 0; j < buf.len; j++) {
       unsigned char c = buf.base[j];
+      unsigned int prev_utf8_codepoint = utf8_codepoint;
 
       /* Run the character through the utf8 decoder We happily accept non */
       /* shortest form encodings and invalid code points - there's no real */
@@ -1884,126 +1912,143 @@ static int uv_tty_write_bufs(uv_tty_t* handle,
             /* that is supported and used by most ANSI terminals today. */
             continue;
 
+          } else if (utf8_codepoint == ' ') {
+            /* Denotes the end of an argument. */
+            if (ansi_parser_state & ANSI_IN_ARG) {
+              ansi_parser_state &= ~ANSI_IN_ARG;
+            }
+            continue;
+
           } else if (utf8_codepoint >= '@' && utf8_codepoint <= '~' &&
                      (handle->tty.wr.ansi_csi_argc > 0 || utf8_codepoint != '[')) {
             int x, y, d;
 
             /* Command byte */
-            switch (utf8_codepoint) {
-              case 'A':
-                /* cursor up */
-                FLUSH_TEXT();
-                y = -(handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1);
-                uv_tty_move_caret(handle, 0, 1, y, 1, error);
-                break;
-
-              case 'B':
-                /* cursor down */
-                FLUSH_TEXT();
-                y = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1;
-                uv_tty_move_caret(handle, 0, 1, y, 1, error);
-                break;
-
-              case 'C':
-                /* cursor forward */
-                FLUSH_TEXT();
-                x = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1;
-                uv_tty_move_caret(handle, x, 1, 0, 1, error);
-                break;
+            if (prev_utf8_codepoint != ' ') {
+              switch (utf8_codepoint) {
+                case 'A':
+                  /* cursor up */
+                  FLUSH_TEXT();
+                  y = -(handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1);
+                  uv_tty_move_caret(handle, 0, 1, y, 1, error);
+                  break;
 
-              case 'D':
-                /* cursor back */
-                FLUSH_TEXT();
-                x = -(handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1);
-                uv_tty_move_caret(handle, x, 1, 0, 1, error);
-                break;
+                case 'B':
+                  /* cursor down */
+                  FLUSH_TEXT();
+                  y = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1;
+                  uv_tty_move_caret(handle, 0, 1, y, 1, error);
+                  break;
 
-              case 'E':
-                /* cursor next line */
-                FLUSH_TEXT();
-                y = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1;
-                uv_tty_move_caret(handle, 0, 0, y, 1, error);
-                break;
+                case 'C':
+                  /* cursor forward */
+                  FLUSH_TEXT();
+                  x = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1;
+                  uv_tty_move_caret(handle, x, 1, 0, 1, error);
+                  break;
 
-              case 'F':
-                /* cursor previous line */
-                FLUSH_TEXT();
-                y = -(handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1);
-                uv_tty_move_caret(handle, 0, 0, y, 1, error);
-                break;
+                case 'D':
+                  /* cursor back */
+                  FLUSH_TEXT();
+                  x = -(handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1);
+                  uv_tty_move_caret(handle, x, 1, 0, 1, error);
+                  break;
 
-              case 'G':
-                /* cursor horizontal move absolute */
-                FLUSH_TEXT();
-                x = (handle->tty.wr.ansi_csi_argc >= 1 && handle->tty.wr.ansi_csi_argv[0])
-                  ? handle->tty.wr.ansi_csi_argv[0] - 1 : 0;
-                uv_tty_move_caret(handle, x, 0, 0, 1, error);
-                break;
-
-              case 'H':
-              case 'f':
-                /* cursor move absolute */
-                FLUSH_TEXT();
-                y = (handle->tty.wr.ansi_csi_argc >= 1 && handle->tty.wr.ansi_csi_argv[0])
-                  ? handle->tty.wr.ansi_csi_argv[0] - 1 : 0;
-                x = (handle->tty.wr.ansi_csi_argc >= 2 && handle->tty.wr.ansi_csi_argv[1])
-                  ? handle->tty.wr.ansi_csi_argv[1] - 1 : 0;
-                uv_tty_move_caret(handle, x, 0, y, 0, error);
-                break;
-
-              case 'J':
-                /* Erase screen */
-                FLUSH_TEXT();
-                d = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 0;
-                if (d >= 0 && d <= 2) {
-                  uv_tty_clear(handle, d, 1, error);
-                }
-                break;
-
-              case 'K':
-                /* Erase line */
-                FLUSH_TEXT();
-                d = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 0;
-                if (d >= 0 && d <= 2) {
-                  uv_tty_clear(handle, d, 0, error);
-                }
-                break;
-
-              case 'm':
-                /* Set style */
-                FLUSH_TEXT();
-                uv_tty_set_style(handle, error);
-                break;
+                case 'E':
+                  /* cursor next line */
+                  FLUSH_TEXT();
+                  y = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1;
+                  uv_tty_move_caret(handle, 0, 0, y, 1, error);
+                  break;
 
-              case 's':
-                /* Save the cursor position. */
-                FLUSH_TEXT();
-                uv_tty_save_state(handle, 0, error);
-                break;
+                case 'F':
+                  /* cursor previous line */
+                  FLUSH_TEXT();
+                  y = -(handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 1);
+                  uv_tty_move_caret(handle, 0, 0, y, 1, error);
+                  break;
 
-              case 'u':
-                /* Restore the cursor position */
-                FLUSH_TEXT();
-                uv_tty_restore_state(handle, 0, error);
-                break;
+                case 'G':
+                  /* cursor horizontal move absolute */
+                  FLUSH_TEXT();
+                  x = (handle->tty.wr.ansi_csi_argc >= 1 && handle->tty.wr.ansi_csi_argv[0])
+                    ? handle->tty.wr.ansi_csi_argv[0] - 1 : 0;
+                  uv_tty_move_caret(handle, x, 0, 0, 1, error);
+                  break;
+
+                case 'H':
+                case 'f':
+                  /* cursor move absolute */
+                  FLUSH_TEXT();
+                  y = (handle->tty.wr.ansi_csi_argc >= 1 && handle->tty.wr.ansi_csi_argv[0])
+                    ? handle->tty.wr.ansi_csi_argv[0] - 1 : 0;
+                  x = (handle->tty.wr.ansi_csi_argc >= 2 && handle->tty.wr.ansi_csi_argv[1])
+                    ? handle->tty.wr.ansi_csi_argv[1] - 1 : 0;
+                  uv_tty_move_caret(handle, x, 0, y, 0, error);
+                  break;
+
+                case 'J':
+                  /* Erase screen */
+                  FLUSH_TEXT();
+                  d = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 0;
+                  if (d >= 0 && d <= 2) {
+                    uv_tty_clear(handle, d, 1, error);
+                  }
+                  break;
+
+                case 'K':
+                  /* Erase line */
+                  FLUSH_TEXT();
+                  d = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 0;
+                  if (d >= 0 && d <= 2) {
+                    uv_tty_clear(handle, d, 0, error);
+                  }
+                  break;
+
+                case 'm':
+                  /* Set style */
+                  FLUSH_TEXT();
+                  uv_tty_set_style(handle, error);
+                  break;
 
-              case 'l':
-                /* Hide the cursor */
-                if (handle->tty.wr.ansi_csi_argc == 1 &&
-                    handle->tty.wr.ansi_csi_argv[0] == 25) {
+                case 's':
+                  /* Save the cursor position. */
                   FLUSH_TEXT();
-                  uv_tty_set_cursor_visibility(handle, 0, error);
-                }
-                break;
-
-              case 'h':
-                /* Show the cursor */
-                if (handle->tty.wr.ansi_csi_argc == 1 &&
-                    handle->tty.wr.ansi_csi_argv[0] == 25) {
+                  uv_tty_save_state(handle, 0, error);
+                  break;
+
+                case 'u':
+                  /* Restore the cursor position */
                   FLUSH_TEXT();
-                  uv_tty_set_cursor_visibility(handle, 1, error);
-                }
-                break;
+                  uv_tty_restore_state(handle, 0, error);
+                  break;
+
+                case 'l':
+                  /* Hide the cursor */
+                  if (handle->tty.wr.ansi_csi_argc == 1 &&
+                      handle->tty.wr.ansi_csi_argv[0] == 25) {
+                    FLUSH_TEXT();
+                    uv_tty_set_cursor_visibility(handle, 0, error);
+                  }
+                  break;
+
+                case 'h':
+                  /* Show the cursor */
+                  if (handle->tty.wr.ansi_csi_argc == 1 &&
+                      handle->tty.wr.ansi_csi_argv[0] == 25) {
+                    FLUSH_TEXT();
+                    uv_tty_set_cursor_visibility(handle, 1, error);
+                  }
+                  break;
+
+              }
+            } else if (utf8_codepoint == 'q') {
+              /* Change the cursor shape */
+              d = handle->tty.wr.ansi_csi_argc ? handle->tty.wr.ansi_csi_argv[0] : 0;
+              if (d >= 0 && d <= 6) {
+                FLUSH_TEXT();
+                uv_tty_set_cursor_shape(handle, error);
+              }
             }
 
             /* Sequence ended - go back to normal state. */

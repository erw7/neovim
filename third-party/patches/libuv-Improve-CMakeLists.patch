diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8cd86271..ad58e5d6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,8 +3,44 @@ cmake_minimum_required(VERSION 3.0)
 project(libuv)
 enable_testing()
 
+if(DEFINED BUILD_SHARED_LIBS)
+  if(BUILD_SHARED_LIBS)
+    if(DEFINED LIBUV_ENABLE_SHARED AND NOT LIBUV_ENABLE_SHARED)
+      message(WARNING "LIBUV_ENABLE_SHARED is overridden to ON by BUILD_SHARED_LIBS")
+    endif()
+    set(LIBUV_ENABLE_SHARED ON)
+    if(DEFINED LIBUV_ENABLE_STATIC AND LIBUV_ENABLE_STATIC)
+      message(WARNING "LIBUV_ENABLE_STATIC is overridden to OFF by BUILD_SHARED_LIBS")
+    endif()
+    set(LIBUV_ENABLE_STATIC OFF)
+  else()
+    if(DEFINED LIBUV_ENABLE_SHARED AND LIBUV_ENABLE_SHARED)
+      message(WARNING "LIBUV_ENABLE_SHARED is overridden to OFF by BUILD_SHARED_LIBS")
+    endif()
+    set(LIBUV_ENABLE_SHARED OFF)
+    if(DEFINED LIBUV_ENABLE_STATIC AND NOT LIBUV_ENABLE_STATIC)
+      message(WARNING "LIBUV_ENABLE_STATIC is overridden to ON by BUILD_SHARED_LIBS")
+    endif()
+    set(LIBUV_ENABLE_STATIC ON)
+  endif()
+else()
+  if(NOT DEFINED LIBUV_ENABLE_SHARED)
+    set(LIBUV_ENABLE_SHARED ON)
+  endif()
+  if(NOT DEFINED LIBUV_ENABLE_STATIC)
+    set(LIBUV_ENABLE_STATIC ON)
+  endif()
+endif()
+
+if(NOT LIBUV_ENABLE_SHARED AND NOT LIBUV_ENABLE_STATIC)
+  message(FATAL_ERROR "Nothing to build for ${PROJECT_NAME}")
+endif()
+
 if(MSVC)
   list(APPEND uv_cflags /W4)
+  if(MSVC_VERSION GREATER 1800)
+    add_definitions(/source-charset:utf-8)
+  endif()
 elseif(CMAKE_C_COMPILER_ID MATCHES "AppleClang|Clang|GNU")
   list(APPEND uv_cflags -fvisibility=hidden --std=gnu89)
   list(APPEND uv_cflags -Wall -Wextra -Wstrict-prototypes)
@@ -328,41 +364,76 @@ if(CMAKE_SYSTEM_NAME MATCHES "Darwin|DragonFly|FreeBSD|Linux|NetBSD|OpenBSD")
   list(APPEND uv_test_libraries util)
 endif()
 
-add_library(uv SHARED ${uv_sources})
-target_compile_definitions(uv PRIVATE ${uv_defines} BUILDING_UV_SHARED=1)
-target_compile_options(uv PRIVATE ${uv_cflags})
-target_include_directories(uv PRIVATE include src)
-target_link_libraries(uv ${uv_libraries})
+if(CYGWIN)
+  list(APPEND uv_defines _GNU_SOURCE)
+  list(APPEND uv_sources
+       src/unix/cygwin.c
+       src/unix/bsd-ifaddrs.c
+       src/unix/no-fsevents.c
+       src/unix/no-proctitle.c
+       src/unix/posix-hrtime.c
+       src/unix/posix-poll.c
+       src/unix/procfs-exepath.c
+       src/unix/sysinfo-loadavg.c
+       src/unix/sysinfo-memory.c)
+endif()
 
-add_library(uv_a STATIC ${uv_sources})
-target_compile_definitions(uv_a PRIVATE ${uv_defines})
-target_compile_options(uv_a PRIVATE ${uv_cflags})
-target_include_directories(uv_a PRIVATE include src)
-target_link_libraries(uv_a ${uv_libraries})
+if(LIBUV_ENABLE_SHARED)
+  add_library(uv_shared SHARED ${uv_sources})
+  target_compile_definitions(uv_shared PRIVATE ${uv_defines} BUILDING_UV_SHARED=1)
+  target_compile_options(uv_shared PRIVATE ${uv_cflags})
+  target_include_directories(uv_shared PRIVATE include src)
+  target_link_libraries(uv_shared ${uv_libraries})
+  set_target_properties(uv_shared PROPERTIES OUTPUT_NAME "uv")
+  if(MSVC AND LIBUV_ENABLE_STATIC)
+    set_target_properties(uv_shared PROPERTIES IMPORT_SUFFIX "_import.lib")
+  endif()
+endif()
+
+if(LIBUV_ENABLE_STATIC)
+  add_library(uv_static STATIC ${uv_sources})
+  target_compile_definitions(uv_static PRIVATE ${uv_defines})
+  target_compile_options(uv_static PRIVATE ${uv_cflags})
+  target_include_directories(uv_static PRIVATE include src)
+  target_link_libraries(uv_static ${uv_libraries})
+  set_target_properties(uv_static PROPERTIES OUTPUT_NAME "uv")
+endif()
+
+if(WIN32 AND BUILD_TESTING AND LIBUV_ENABLE_SHARED AND NOT LIBUV_ENABLE_STATIC)
+  message(WARNING "BUILD_TESTING is overwritten to OFF because testing on"
+                  " dynamic link libraries is not supported on Windows.")
+  set(BUILD_TESTING OFF)
+endif()
 
 if(BUILD_TESTING)
   include(CTest)
-  add_executable(uv_run_tests ${uv_test_sources})
-  target_compile_definitions(uv_run_tests PRIVATE ${uv_defines})
-  target_compile_options(uv_run_tests PRIVATE ${uv_cflags})
-  target_include_directories(uv_run_tests PRIVATE include)
-  target_link_libraries(uv_run_tests uv ${uv_test_libraries})
-  add_test(NAME uv_test
-           COMMAND uv_run_tests
-           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
-  add_executable(uv_run_tests_a ${uv_test_sources})
-  target_compile_definitions(uv_run_tests_a PRIVATE ${uv_defines})
-  target_compile_options(uv_run_tests_a PRIVATE ${uv_cflags})
-  target_include_directories(uv_run_tests_a PRIVATE include)
-  target_link_libraries(uv_run_tests_a uv_a ${uv_test_libraries})
-  add_test(NAME uv_test_a
-           COMMAND uv_run_tests_a
-           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+  if(NOT WIN32 AND LIBUV_ENABLE_SHARED)
+    # Dynamic link library version can't be compiled on Windows because some
+    # functions necessary for testing are not exported.
+    add_executable(uv_run_tests_shared ${uv_test_sources})
+    target_compile_definitions(uv_run_tests_shared PRIVATE ${uv_defines})
+    target_compile_options(uv_run_tests_shared PRIVATE ${uv_cflags})
+    target_include_directories(uv_run_tests_shared PRIVATE include)
+    target_link_libraries(uv_run_tests_shared uv_shared ${uv_test_libraries})
+    add_test(NAME uv_test_shared
+      COMMAND uv_run_tests_shared
+      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+  endif()
+  if(LIBUV_ENABLE_STATIC)
+    add_executable(uv_run_tests_static ${uv_test_sources})
+    target_compile_definitions(uv_run_tests_static PRIVATE ${uv_defines})
+    target_compile_options(uv_run_tests_static PRIVATE ${uv_cflags})
+    target_include_directories(uv_run_tests_static PRIVATE include)
+    target_link_libraries(uv_run_tests_static uv_static ${uv_test_libraries})
+    add_test(NAME uv_test_static
+      COMMAND uv_run_tests_static
+      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+  endif()
 endif()
 
-if(UNIX)
+include(GNUInstallDirs)
+if(UNIX OR MINGW)
   # Now for some gibbering horrors from beyond the stars...
-  include(GNUInstallDirs)
   foreach(x ${uv_libraries})
     set(LIBS "${LIBS} -l${x}")
   endforeach(x)
@@ -372,11 +443,20 @@ if(UNIX)
   set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
   set(prefix ${CMAKE_INSTALL_PREFIX})
   configure_file(libuv.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libuv.pc @ONLY)
-
-  install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
-  install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR})
   install(FILES LICENSE ${CMAKE_CURRENT_BINARY_DIR}/libuv.pc
           DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
-  install(TARGETS uv LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
-  install(TARGETS uv_a ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+endif()
+
+install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR})
+if(LIBUV_ENABLE_SHARED)
+  if(WIN32 OR CYGWIN)
+    install(TARGETS uv_shared RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+    install(TARGETS uv_shared ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+  else()
+    install(TARGETS uv_shared LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
+  endif()
+endif()
+if(LIBUV_ENABLE_STATIC)
+  install(TARGETS uv_static ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
